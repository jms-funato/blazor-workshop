@page "/login"
@inject HttpClient http
@inject ILoginService  loginService
@inject NavigationManager navigationManager

@using BlazingPizza.Client.Auth

@*<div class="position-absolute h-100 w-100 m-0 d-flex align-items-center justify-content-center">
        <div class="card">
            <div class="card-header-pills">Log in</div>
            <div class="card-body">
                <EditForm Model="userInfo" OnValidSubmit="LoginUser">
                    <DataAnnotationsValidator/>

                    <div class="form-group">
                        <div>
                            <InputText class="form-control" @bind-Value="@userInfo.Email" placeholder="Email"/>
                            <ValidationMessage For="@(() => userInfo.Email)"/>
                        </div>
                    </div>

                    <div class="form-group">
                        <div>
                            <InputPassword class="form-control" @bind-Value="@userInfo.Password" Placeholder="Password"/>
                            <ValidationMessage For="@(() => userInfo.Password)"/>
                        </div>
                    </div>
                    <button type="submit" class="btn btn-primary">Log in</button>
                </EditForm>

                <div class="card-text">
                    <a href="Register">Register</a>
                </div>
            </div>
        </div>
    </div>*@

@*<RadzenCard>
        <RadzenLogin Login="@((args) => SignIn(args, "Login with register and password reset"))"
                     ResetPassword="@((args) => ResetPassword(args, "Login with register and password reset"))"
                     Register="@((args) => Register("Login with register and password reset"))" Style="margin-bottom: 20px;"/>
    </RadzenCard>*@

<div class="container">
    <div class="row">
        <div class="col-sm-9 col-md-7 col-lg-5 mx-auto">
            <div class="card card-signin my-5">
                <div class="card-body">
                    <h5 class="card-title text-center">Log in</h5>
                    <EditForm Model="userInfo" OnValidSubmit="LoginUser" class="form-signin">
                        <DataAnnotationsValidator/>
                        <div class="form-label-group">
                            <input type="email" id="inputEmail" @bind-value="@userInfo.Email" class="form-control" placeholder="Email address" required autofocus>
                                <label for="inputEmail">Email address</label>
                            
                        </div>

                        <div class="form-label-group">
                            <input type="password" id="inputPassword" class="form-control" @bind-value="@userInfo.Password" placeholder="Password" required>
                                <label for="inputPassword">Password</label>                           
                        </div>

                        <div class="custom-control custom-checkbox mb-3">
                            <input type="checkbox" class="custom-control-input" id="customCheck1">
                            <label class="custom-control-label" for="customCheck1">Remember password</label>
                        </div>
                        <button class="btn btn-lg btn-primary btn-block text-uppercase" type="submit">Log in</button>
                        <hr class="my-4">
                        <RadzenLink Icon="accessibility" Path="Register" Text="Register" />
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private UserInfo userInfo = new UserInfo();

    async Task LoginUser()
    {
        var result = await http.PostJsonAsync<UserToken>("api/accounts/login", userInfo);
        await loginService.Login(result.Token);
        navigationManager.NavigateTo("");
    }

    ////Radzen
    //string userName = "admin";
    //string password = "admin";
    //Dictionary<DateTime, string> events = new Dictionary<DateTime, string>();

    //void SignIn(LoginArgs args, string name)
    //{
    //    events.Add(DateTime.Now, $"{name} -> Username: {args.Username} and password: {args.Password}");
    //    StateHasChanged();
    //}

    //void Register(string name)
    //{
    //    events.Add(DateTime.Now, $"{name} -> Register");
    //    StateHasChanged();
    //}

    //void ResetPassword(string value, string name)
    //{
    //    events.Add(DateTime.Now, $"{name} -> ResetPassword for user: {value}");
    //    StateHasChanged();
    //}
}