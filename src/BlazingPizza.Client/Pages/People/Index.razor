@page "/people"
@inject HttpClient http
@inject IJSRuntime js
@using System.IO

<h3>People</h3>

<AuthorizeView>
    <Authorized>
        <div>
            <a class="btn btn-success" href="people/create">New Person</a>
        </div>
    </Authorized>
</AuthorizeView>

@if (people == null)
{
    <text>Loading...</text>
}
else if (people.Length == 0)
{
    <text>No Data</text>
}
else
{
    <div>
        <table class="table">
            <thead>
                <tr>
                    <th></th>
                    <th>Id</th>
                    <th>Name</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var person in people)
                {
                    <tr>
                        <td>
                            <AuthorizeView>
                                <Authorized>
                                    <a class="btn btn-success" href="people/edit/@person.Id">Edit</a>
                                    <button class="btn btn-danger" @onclick="@(()=>DeletePerson(person.Id))">Delete</button>
                                </Authorized>
                            </AuthorizeView>
                        </td>
                        <td>@person.Id</td>
                        <td>@person.Name</td>
                    </tr>
                }
            </tbody>
        </table>
        <button @onclick="ExportAsCSV">Export CSV</button>
    </div>

}

@code {
    Person[] people { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadPeople();
    }

    async Task LoadPeople()
    {
        people = await http.GetJsonAsync<Person[]>("api/people");
    }

    async Task DeletePerson(int personId)
    {
        //await js.DisplayMessage("削除確認","削除しますか?",SweetAlertMessageType.success);
        var personSeleted = people.First(x => x.Id == personId);
        if (await js.Confirm("ユーザー削除", $"ユーザー:{personSeleted.Name}を削除しますか?", SweetAlertMessageType.question))
        {
            await http.DeleteAsync($"api/people/{personId}");
            await LoadPeople();
        }

    }

    private void ExportAsCSV()
    {
        using (var ms = new MemoryStream())
        {
            using (var writer = new StreamWriter(ms))
            {
                using (var csv = new CsvHelper.CsvWriter(writer, System.Globalization.CultureInfo.InvariantCulture))
                {
                    csv.WriteRecords(people);
                }
            }

            var arr = ms.ToArray();
            js.SaveAs("people.csv", arr);
        }
    }
}