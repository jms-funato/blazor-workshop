// <auto-generated />
using System;
using ADPHI.Server;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ADPHI.Server.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class PizzaStoreContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("ADPHI.Shared.Models.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<string>("Line1")
                        .IsRequired()
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<string>("Line2")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("varchar(20) CHARACTER SET utf8mb4")
                        .HasMaxLength(20);

                    b.Property<string>("Region")
                        .IsRequired()
                        .HasColumnType("varchar(20) CHARACTER SET utf8mb4")
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("ADPHI.Shared.Models.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Dominican Republic"
                        },
                        new
                        {
                            Id = 2,
                            Name = "United States"
                        });
                });

            modelBuilder.Entity("ADPHI.Shared.Models.NotificationSubscription", b =>
                {
                    b.Property<int>("NotificationSubscriptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Auth")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("P256dh")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Url")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("UserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("NotificationSubscriptionId");

                    b.ToTable("NotificationSubscriptions");
                });

            modelBuilder.Entity("ADPHI.Shared.Models.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("DeliveryAddressId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("OrderId");

                    b.HasIndex("DeliveryAddressId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("ADPHI.Shared.Models.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Biography")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("StateId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StateId");

                    b.ToTable("People");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Person 1",
                            StateId = 1
                        },
                        new
                        {
                            Id = 2,
                            Name = "Person 2",
                            StateId = 1
                        },
                        new
                        {
                            Id = 3,
                            Name = "Person 3",
                            StateId = 1
                        },
                        new
                        {
                            Id = 4,
                            Name = "Person 4",
                            StateId = 1
                        },
                        new
                        {
                            Id = 5,
                            Name = "Person 5",
                            StateId = 1
                        },
                        new
                        {
                            Id = 6,
                            Name = "Person 6",
                            StateId = 1
                        },
                        new
                        {
                            Id = 7,
                            Name = "Person 7",
                            StateId = 1
                        },
                        new
                        {
                            Id = 8,
                            Name = "Person 8",
                            StateId = 1
                        },
                        new
                        {
                            Id = 9,
                            Name = "Person 9",
                            StateId = 1
                        },
                        new
                        {
                            Id = 10,
                            Name = "Person 10",
                            StateId = 1
                        },
                        new
                        {
                            Id = 11,
                            Name = "Person 11",
                            StateId = 1
                        },
                        new
                        {
                            Id = 12,
                            Name = "Person 12",
                            StateId = 1
                        },
                        new
                        {
                            Id = 13,
                            Name = "Person 13",
                            StateId = 1
                        },
                        new
                        {
                            Id = 14,
                            Name = "Person 14",
                            StateId = 1
                        },
                        new
                        {
                            Id = 15,
                            Name = "Person 15",
                            StateId = 1
                        },
                        new
                        {
                            Id = 16,
                            Name = "Person 16",
                            StateId = 1
                        },
                        new
                        {
                            Id = 17,
                            Name = "Person 17",
                            StateId = 1
                        },
                        new
                        {
                            Id = 18,
                            Name = "Person 18",
                            StateId = 1
                        },
                        new
                        {
                            Id = 19,
                            Name = "Person 19",
                            StateId = 1
                        },
                        new
                        {
                            Id = 20,
                            Name = "Person 20",
                            StateId = 1
                        },
                        new
                        {
                            Id = 21,
                            Name = "Person 21",
                            StateId = 1
                        },
                        new
                        {
                            Id = 22,
                            Name = "Person 22",
                            StateId = 1
                        },
                        new
                        {
                            Id = 23,
                            Name = "Person 23",
                            StateId = 1
                        },
                        new
                        {
                            Id = 24,
                            Name = "Person 24",
                            StateId = 1
                        },
                        new
                        {
                            Id = 25,
                            Name = "Person 25",
                            StateId = 1
                        },
                        new
                        {
                            Id = 26,
                            Name = "Person 26",
                            StateId = 1
                        },
                        new
                        {
                            Id = 27,
                            Name = "Person 27",
                            StateId = 1
                        },
                        new
                        {
                            Id = 28,
                            Name = "Person 28",
                            StateId = 1
                        },
                        new
                        {
                            Id = 29,
                            Name = "Person 29",
                            StateId = 1
                        },
                        new
                        {
                            Id = 30,
                            Name = "Person 30",
                            StateId = 1
                        },
                        new
                        {
                            Id = 31,
                            Name = "Person 31",
                            StateId = 1
                        },
                        new
                        {
                            Id = 32,
                            Name = "Person 32",
                            StateId = 1
                        },
                        new
                        {
                            Id = 33,
                            Name = "Person 33",
                            StateId = 1
                        },
                        new
                        {
                            Id = 34,
                            Name = "Person 34",
                            StateId = 1
                        },
                        new
                        {
                            Id = 35,
                            Name = "Person 35",
                            StateId = 1
                        },
                        new
                        {
                            Id = 36,
                            Name = "Person 36",
                            StateId = 1
                        },
                        new
                        {
                            Id = 37,
                            Name = "Person 37",
                            StateId = 1
                        },
                        new
                        {
                            Id = 38,
                            Name = "Person 38",
                            StateId = 1
                        },
                        new
                        {
                            Id = 39,
                            Name = "Person 39",
                            StateId = 1
                        },
                        new
                        {
                            Id = 40,
                            Name = "Person 40",
                            StateId = 1
                        },
                        new
                        {
                            Id = 41,
                            Name = "Person 41",
                            StateId = 1
                        },
                        new
                        {
                            Id = 42,
                            Name = "Person 42",
                            StateId = 1
                        },
                        new
                        {
                            Id = 43,
                            Name = "Person 43",
                            StateId = 1
                        },
                        new
                        {
                            Id = 44,
                            Name = "Person 44",
                            StateId = 1
                        },
                        new
                        {
                            Id = 45,
                            Name = "Person 45",
                            StateId = 1
                        },
                        new
                        {
                            Id = 46,
                            Name = "Person 46",
                            StateId = 1
                        },
                        new
                        {
                            Id = 47,
                            Name = "Person 47",
                            StateId = 1
                        },
                        new
                        {
                            Id = 48,
                            Name = "Person 48",
                            StateId = 1
                        },
                        new
                        {
                            Id = 49,
                            Name = "Person 49",
                            StateId = 1
                        },
                        new
                        {
                            Id = 50,
                            Name = "Person 50",
                            StateId = 1
                        },
                        new
                        {
                            Id = 51,
                            Name = "Person 51",
                            StateId = 1
                        },
                        new
                        {
                            Id = 52,
                            Name = "Person 52",
                            StateId = 1
                        },
                        new
                        {
                            Id = 53,
                            Name = "Person 53",
                            StateId = 1
                        },
                        new
                        {
                            Id = 54,
                            Name = "Person 54",
                            StateId = 1
                        },
                        new
                        {
                            Id = 55,
                            Name = "Person 55",
                            StateId = 1
                        },
                        new
                        {
                            Id = 56,
                            Name = "Person 56",
                            StateId = 1
                        },
                        new
                        {
                            Id = 57,
                            Name = "Person 57",
                            StateId = 1
                        },
                        new
                        {
                            Id = 58,
                            Name = "Person 58",
                            StateId = 1
                        },
                        new
                        {
                            Id = 59,
                            Name = "Person 59",
                            StateId = 1
                        },
                        new
                        {
                            Id = 60,
                            Name = "Person 60",
                            StateId = 1
                        },
                        new
                        {
                            Id = 61,
                            Name = "Person 61",
                            StateId = 1
                        },
                        new
                        {
                            Id = 62,
                            Name = "Person 62",
                            StateId = 1
                        },
                        new
                        {
                            Id = 63,
                            Name = "Person 63",
                            StateId = 1
                        },
                        new
                        {
                            Id = 64,
                            Name = "Person 64",
                            StateId = 1
                        },
                        new
                        {
                            Id = 65,
                            Name = "Person 65",
                            StateId = 1
                        },
                        new
                        {
                            Id = 66,
                            Name = "Person 66",
                            StateId = 1
                        },
                        new
                        {
                            Id = 67,
                            Name = "Person 67",
                            StateId = 1
                        },
                        new
                        {
                            Id = 68,
                            Name = "Person 68",
                            StateId = 1
                        },
                        new
                        {
                            Id = 69,
                            Name = "Person 69",
                            StateId = 1
                        },
                        new
                        {
                            Id = 70,
                            Name = "Person 70",
                            StateId = 1
                        },
                        new
                        {
                            Id = 71,
                            Name = "Person 71",
                            StateId = 1
                        },
                        new
                        {
                            Id = 72,
                            Name = "Person 72",
                            StateId = 1
                        },
                        new
                        {
                            Id = 73,
                            Name = "Person 73",
                            StateId = 1
                        },
                        new
                        {
                            Id = 74,
                            Name = "Person 74",
                            StateId = 1
                        },
                        new
                        {
                            Id = 75,
                            Name = "Person 75",
                            StateId = 1
                        },
                        new
                        {
                            Id = 76,
                            Name = "Person 76",
                            StateId = 1
                        },
                        new
                        {
                            Id = 77,
                            Name = "Person 77",
                            StateId = 1
                        },
                        new
                        {
                            Id = 78,
                            Name = "Person 78",
                            StateId = 1
                        },
                        new
                        {
                            Id = 79,
                            Name = "Person 79",
                            StateId = 1
                        },
                        new
                        {
                            Id = 80,
                            Name = "Person 80",
                            StateId = 1
                        },
                        new
                        {
                            Id = 81,
                            Name = "Person 81",
                            StateId = 1
                        },
                        new
                        {
                            Id = 82,
                            Name = "Person 82",
                            StateId = 1
                        },
                        new
                        {
                            Id = 83,
                            Name = "Person 83",
                            StateId = 1
                        },
                        new
                        {
                            Id = 84,
                            Name = "Person 84",
                            StateId = 1
                        },
                        new
                        {
                            Id = 85,
                            Name = "Person 85",
                            StateId = 1
                        },
                        new
                        {
                            Id = 86,
                            Name = "Person 86",
                            StateId = 1
                        },
                        new
                        {
                            Id = 87,
                            Name = "Person 87",
                            StateId = 1
                        },
                        new
                        {
                            Id = 88,
                            Name = "Person 88",
                            StateId = 1
                        },
                        new
                        {
                            Id = 89,
                            Name = "Person 89",
                            StateId = 1
                        },
                        new
                        {
                            Id = 90,
                            Name = "Person 90",
                            StateId = 1
                        },
                        new
                        {
                            Id = 91,
                            Name = "Person 91",
                            StateId = 1
                        },
                        new
                        {
                            Id = 92,
                            Name = "Person 92",
                            StateId = 1
                        },
                        new
                        {
                            Id = 93,
                            Name = "Person 93",
                            StateId = 1
                        },
                        new
                        {
                            Id = 94,
                            Name = "Person 94",
                            StateId = 1
                        },
                        new
                        {
                            Id = 95,
                            Name = "Person 95",
                            StateId = 1
                        },
                        new
                        {
                            Id = 96,
                            Name = "Person 96",
                            StateId = 1
                        },
                        new
                        {
                            Id = 97,
                            Name = "Person 97",
                            StateId = 1
                        },
                        new
                        {
                            Id = 98,
                            Name = "Person 98",
                            StateId = 1
                        },
                        new
                        {
                            Id = 99,
                            Name = "Person 99",
                            StateId = 1
                        });
                });

            modelBuilder.Entity("ADPHI.Shared.Models.Pizza", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("Size")
                        .HasColumnType("int");

                    b.Property<int>("SpecialId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("SpecialId");

                    b.ToTable("Pizzas");
                });

            modelBuilder.Entity("ADPHI.Shared.Models.PizzaSpecial", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<decimal>("BasePrice")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("Specials");
                });

            modelBuilder.Entity("ADPHI.Shared.Models.PizzaTopping", b =>
                {
                    b.Property<int>("PizzaId")
                        .HasColumnType("int");

                    b.Property<int>("ToppingId")
                        .HasColumnType("int");

                    b.HasKey("PizzaId", "ToppingId");

                    b.HasIndex("ToppingId");

                    b.ToTable("PizzaTopping");
                });

            modelBuilder.Entity("ADPHI.Shared.Models.State", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("States");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CountryId = 1,
                            Name = "Santo Domingo"
                        },
                        new
                        {
                            Id = 2,
                            CountryId = 1,
                            Name = "San Cristobal"
                        },
                        new
                        {
                            Id = 3,
                            CountryId = 2,
                            Name = "Vermont"
                        },
                        new
                        {
                            Id = 4,
                            CountryId = 2,
                            Name = "New York"
                        });
                });

            modelBuilder.Entity("ADPHI.Shared.Models.Topping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(65,30)");

                    b.HasKey("Id");

                    b.ToTable("Toppings");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Email")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Value")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("ADPHI.Shared.Models.Order", b =>
                {
                    b.HasOne("ADPHI.Shared.Models.Address", "DeliveryAddress")
                        .WithMany()
                        .HasForeignKey("DeliveryAddressId");

                    b.OwnsOne("ADPHI.Shared.Models.LatLong", "DeliveryLocation", b1 =>
                        {
                            b1.Property<int>("OrderId")
                                .HasColumnType("int");

                            b1.Property<double>("Latitude")
                                .HasColumnType("double");

                            b1.Property<double>("Longitude")
                                .HasColumnType("double");

                            b1.HasKey("OrderId");

                            b1.ToTable("Orders");

                            b1.WithOwner()
                                .HasForeignKey("OrderId");
                        });
                });

            modelBuilder.Entity("ADPHI.Shared.Models.Person", b =>
                {
                    b.HasOne("ADPHI.Shared.Models.State", "State")
                        .WithMany()
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ADPHI.Shared.Models.Pizza", b =>
                {
                    b.HasOne("ADPHI.Shared.Models.Order", null)
                        .WithMany("Pizzas")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ADPHI.Shared.Models.PizzaSpecial", "Special")
                        .WithMany()
                        .HasForeignKey("SpecialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ADPHI.Shared.Models.PizzaTopping", b =>
                {
                    b.HasOne("ADPHI.Shared.Models.Pizza", null)
                        .WithMany("Toppings")
                        .HasForeignKey("PizzaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ADPHI.Shared.Models.Topping", "Topping")
                        .WithMany()
                        .HasForeignKey("ToppingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ADPHI.Shared.Models.State", b =>
                {
                    b.HasOne("ADPHI.Shared.Models.Country", "Country")
                        .WithMany("States")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
